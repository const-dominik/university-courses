#lang plait

(define-type-alias (Stream 'a) (-> (StreamData 'a)))
(define-type (StreamData 'a)
(sempty)
(scons [head : 'a] [tail : (Stream 'a)]))

(define (sappend xs ys)
  (if (sempty? xs)
      ys
      (scons (scons-head xs) (lambda () (sappend ((scons-tail xs)) ys)))))

(define (sconcat xs)
  (if (sempty? xs)
      (sempty)
      (sappend (scons-head xs) (sconcat ((scons-tail xs))))))

(define (build-slist n f)
  (local
    [(define (it ctr str)
       (if (= ctr -1)
           str
           (it (- ctr 1) (scons (f ctr) (lambda () str)))
       ))]
    
    (it (- n 1) (sempty))))

(define (valid-pos? i board)
  (local
    [(define (valid-it i j k board)
       (type-case (StreamData Number) board
         [(sempty) #t]
         [(scons x board)
          (and (not (= i x))
               (not (= j x))
               (not (= k x))
               (valid-it (- i 1) j (+ k 1) (board)))]))]
    (valid-it (- i 1) i (+ i 1) board)))

(define (queens n)
  (local
    [(define (queens-it board left)
       (if (= left 0)
           (scons board sempty)
           (sconcat (build-slist n (lambda (i)
              (if (valid-pos? i board)
                  (queens-it (scons i (lambda () board)) (- left 1))
                  (sempty)))))))]
    (queens-it (sempty) n)))